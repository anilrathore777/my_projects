// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=50,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=482,HLS_SYN_LUT=979}" *)

module mmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [1:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [1:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_2_fu_209_p2;
reg   [1:0] i_2_reg_573;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_215_p1;
reg   [0:0] tmp_reg_578;
wire   [0:0] exitcond4_fu_203_p2;
wire   [1:0] tmp_3_fu_219_p2;
reg   [1:0] tmp_3_reg_590;
wire   [1:0] j_2_fu_231_p2;
reg   [1:0] j_2_reg_598;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_225_p2;
wire   [0:0] tmp_11_fu_248_p1;
reg   [0:0] tmp_11_reg_608;
wire   [1:0] i_3_fu_410_p2;
reg   [1:0] i_3_reg_628;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_9_fu_416_p1;
reg   [0:0] tmp_9_reg_633;
wire   [0:0] exitcond2_fu_404_p2;
wire   [1:0] tmp_10_fu_420_p2;
reg   [1:0] tmp_10_reg_638;
wire   [1:0] j_3_fu_432_p2;
reg   [1:0] j_3_reg_646;
wire    ap_CS_fsm_state6;
wire   [31:0] Bo_load16_phi_fu_442_p3;
reg   [31:0] Bo_load16_phi_reg_651;
wire   [0:0] exitcond1_fu_426_p2;
wire   [31:0] Bo_load15_phi_fu_450_p3;
reg   [31:0] Bo_load15_phi_reg_656;
wire   [1:0] k_1_fu_464_p2;
reg   [1:0] k_1_reg_664;
wire    ap_CS_fsm_state7;
wire  signed [31:0] Ao_load_phi_fu_490_p3;
reg  signed [31:0] Ao_load_phi_reg_669;
wire   [0:0] exitcond_fu_458_p2;
wire  signed [31:0] Bo_load_phi_fu_497_p3;
reg  signed [31:0] Bo_load_phi_reg_674;
wire   [31:0] t_fu_513_p2;
reg   [31:0] t_reg_679;
wire    ap_CS_fsm_state8;
wire   [31:0] s_fu_517_p2;
wire    ap_CS_fsm_state9;
reg   [1:0] i_reg_110;
reg   [1:0] j_reg_121;
wire    ap_CS_fsm_state4;
reg   [1:0] i_1_reg_132;
reg   [1:0] j_1_reg_143;
reg   [1:0] k_reg_155;
reg   [31:0] s1_reg_166;
wire   [63:0] tmp_6_fu_242_p1;
wire   [63:0] tmp_8_fu_508_p1;
reg   [31:0] Ao_1_1_4_fu_42;
wire   [31:0] Ao_1_1_8_fu_301_p3;
reg   [31:0] Ao_1_1_9_fu_46;
wire   [31:0] Ao_1_1_7_fu_294_p3;
reg   [31:0] Ao_1_1_10_fu_50;
wire   [31:0] Ao_1_1_6_fu_287_p3;
reg   [31:0] Ao_1_1_11_fu_54;
wire   [31:0] Ao_1_1_5_fu_280_p3;
reg   [31:0] Bo_1_1_4_fu_58;
wire   [31:0] Bo_1_1_8_fu_357_p3;
reg   [31:0] Bo_1_1_9_fu_62;
wire   [31:0] Bo_1_1_7_fu_350_p3;
reg   [31:0] Bo_1_1_10_fu_66;
wire   [31:0] Bo_1_1_6_fu_343_p3;
reg   [31:0] Bo_1_1_11_fu_70;
wire   [31:0] Bo_1_1_5_fu_336_p3;
wire   [1:0] tmp_5_fu_237_p2;
wire   [31:0] Ao_1_1_1_fu_252_p3;
wire   [31:0] Ao_1_1_2_fu_259_p3;
wire   [31:0] Ao_1_1_fu_266_p3;
wire   [31:0] Ao_1_1_3_fu_273_p3;
wire   [31:0] Bo_1_1_1_fu_308_p3;
wire   [31:0] Bo_1_1_2_fu_315_p3;
wire   [31:0] Bo_1_1_fu_322_p3;
wire   [31:0] Bo_1_1_3_fu_329_p3;
wire   [0:0] tmp_12_fu_438_p1;
wire   [0:0] tmp_13_fu_470_p1;
wire   [31:0] Ao_load10_phi_fu_474_p3;
wire   [31:0] Ao_load9_phi_fu_482_p3;
wire   [1:0] tmp_4_fu_503_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_132 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_426_p2 == 1'd1))) begin
        i_1_reg_132 <= i_3_reg_628;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_110 <= i_2_reg_573;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_110 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_458_p2 == 1'd1))) begin
        j_1_reg_143 <= j_3_reg_646;
    end else if (((exitcond2_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_143 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_121 <= j_2_reg_598;
    end else if (((exitcond4_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_121 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_155 <= k_1_reg_664;
    end else if (((exitcond1_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_155 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        s1_reg_166 <= s_fu_517_p2;
    end else if (((exitcond1_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        s1_reg_166 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Ao_1_1_10_fu_50 <= Ao_1_1_6_fu_287_p3;
        Ao_1_1_11_fu_54 <= Ao_1_1_5_fu_280_p3;
        Ao_1_1_4_fu_42 <= Ao_1_1_8_fu_301_p3;
        Ao_1_1_9_fu_46 <= Ao_1_1_7_fu_294_p3;
        Bo_1_1_10_fu_66 <= Bo_1_1_6_fu_343_p3;
        Bo_1_1_11_fu_70 <= Bo_1_1_5_fu_336_p3;
        Bo_1_1_4_fu_58 <= Bo_1_1_8_fu_357_p3;
        Bo_1_1_9_fu_62 <= Bo_1_1_7_fu_350_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        Ao_load_phi_reg_669 <= Ao_load_phi_fu_490_p3;
        Bo_load_phi_reg_674 <= Bo_load_phi_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        Bo_load15_phi_reg_656 <= Bo_load15_phi_fu_450_p3;
        Bo_load16_phi_reg_651 <= Bo_load16_phi_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_573 <= i_2_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_628 <= i_3_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_598 <= j_2_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_3_reg_646 <= j_3_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_1_reg_664 <= k_1_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_reg_679 <= t_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_10_reg_638[1] <= tmp_10_fu_420_p2[1];
        tmp_9_reg_633 <= tmp_9_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_11_reg_608 <= tmp_11_fu_248_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_reg_590[1] <= tmp_3_fu_219_p2[1];
        tmp_reg_578 <= tmp_fu_215_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_458_p2 == 1'd1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_426_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_458_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_6_fu_242_p1;

assign Ao_1_1_1_fu_252_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? A_q0 : Ao_1_1_11_fu_54);

assign Ao_1_1_2_fu_259_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? Ao_1_1_10_fu_50 : A_q0);

assign Ao_1_1_3_fu_273_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? Ao_1_1_4_fu_42 : A_q0);

assign Ao_1_1_5_fu_280_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Ao_1_1_1_fu_252_p3 : Ao_1_1_11_fu_54);

assign Ao_1_1_6_fu_287_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Ao_1_1_2_fu_259_p3 : Ao_1_1_10_fu_50);

assign Ao_1_1_7_fu_294_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Ao_1_1_9_fu_46 : Ao_1_1_fu_266_p3);

assign Ao_1_1_8_fu_301_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Ao_1_1_4_fu_42 : Ao_1_1_3_fu_273_p3);

assign Ao_1_1_fu_266_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? A_q0 : Ao_1_1_9_fu_46);

assign Ao_load10_phi_fu_474_p3 = ((tmp_13_fu_470_p1[0:0] === 1'b1) ? Ao_1_1_11_fu_54 : Ao_1_1_10_fu_50);

assign Ao_load9_phi_fu_482_p3 = ((tmp_13_fu_470_p1[0:0] === 1'b1) ? Ao_1_1_9_fu_46 : Ao_1_1_4_fu_42);

assign Ao_load_phi_fu_490_p3 = ((tmp_9_reg_633[0:0] === 1'b1) ? Ao_load10_phi_fu_474_p3 : Ao_load9_phi_fu_482_p3);

assign B_address0 = tmp_6_fu_242_p1;

assign Bo_1_1_1_fu_308_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? B_q0 : Bo_1_1_11_fu_70);

assign Bo_1_1_2_fu_315_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? Bo_1_1_10_fu_66 : B_q0);

assign Bo_1_1_3_fu_329_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? Bo_1_1_4_fu_58 : B_q0);

assign Bo_1_1_5_fu_336_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Bo_1_1_1_fu_308_p3 : Bo_1_1_11_fu_70);

assign Bo_1_1_6_fu_343_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Bo_1_1_2_fu_315_p3 : Bo_1_1_10_fu_66);

assign Bo_1_1_7_fu_350_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Bo_1_1_9_fu_62 : Bo_1_1_fu_322_p3);

assign Bo_1_1_8_fu_357_p3 = ((tmp_reg_578[0:0] === 1'b1) ? Bo_1_1_4_fu_58 : Bo_1_1_3_fu_329_p3);

assign Bo_1_1_fu_322_p3 = ((tmp_11_reg_608[0:0] === 1'b1) ? B_q0 : Bo_1_1_9_fu_62);

assign Bo_load15_phi_fu_450_p3 = ((tmp_12_fu_438_p1[0:0] === 1'b1) ? Bo_1_1_9_fu_62 : Bo_1_1_4_fu_58);

assign Bo_load16_phi_fu_442_p3 = ((tmp_12_fu_438_p1[0:0] === 1'b1) ? Bo_1_1_11_fu_70 : Bo_1_1_10_fu_66);

assign Bo_load_phi_fu_497_p3 = ((tmp_13_fu_470_p1[0:0] === 1'b1) ? Bo_load16_phi_reg_651 : Bo_load15_phi_reg_656);

assign C_address0 = tmp_8_fu_508_p1;

assign C_d0 = s1_reg_166;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_426_p2 = ((j_1_reg_143 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_404_p2 = ((i_1_reg_132 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond3_fu_225_p2 = ((j_reg_121 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond4_fu_203_p2 = ((i_reg_110 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_458_p2 = ((k_reg_155 == 2'd2) ? 1'b1 : 1'b0);

assign i_2_fu_209_p2 = (i_reg_110 + 2'd1);

assign i_3_fu_410_p2 = (i_1_reg_132 + 2'd1);

assign j_2_fu_231_p2 = (j_reg_121 + 2'd1);

assign j_3_fu_432_p2 = (j_1_reg_143 + 2'd1);

assign k_1_fu_464_p2 = (k_reg_155 + 2'd1);

assign s_fu_517_p2 = (t_reg_679 + s1_reg_166);

assign t_fu_513_p2 = ($signed(Ao_load_phi_reg_669) * $signed(Bo_load_phi_reg_674));

assign tmp_10_fu_420_p2 = i_1_reg_132 << 2'd1;

assign tmp_11_fu_248_p1 = j_reg_121[0:0];

assign tmp_12_fu_438_p1 = j_1_reg_143[0:0];

assign tmp_13_fu_470_p1 = k_reg_155[0:0];

assign tmp_3_fu_219_p2 = i_reg_110 << 2'd1;

assign tmp_4_fu_503_p2 = (tmp_10_reg_638 + j_1_reg_143);

assign tmp_5_fu_237_p2 = (tmp_3_reg_590 + j_reg_121);

assign tmp_6_fu_242_p1 = tmp_5_fu_237_p2;

assign tmp_8_fu_508_p1 = tmp_4_fu_503_p2;

assign tmp_9_fu_416_p1 = i_1_reg_132[0:0];

assign tmp_fu_215_p1 = i_reg_110[0:0];

always @ (posedge ap_clk) begin
    tmp_3_reg_590[0] <= 1'b0;
    tmp_10_reg_638[0] <= 1'b0;
end

endmodule //mmult
