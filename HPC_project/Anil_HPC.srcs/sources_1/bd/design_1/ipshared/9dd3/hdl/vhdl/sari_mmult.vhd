-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sari_mmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sari_mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sari_mmult,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=50,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=482,HLS_SYN_LUT=979}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_195_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_559 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_201_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_205_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_576 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_fu_217_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_584 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_234_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_396_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_614 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_fu_402_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_406_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_reg_624 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_fu_418_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_632 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Bbuf_load16_phi_fu_428_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_load16_phi_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bbuf_load15_phi_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_load15_phi_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_450_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_650 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal Abuf_load_phi_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_load_phi_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bbuf_load_phi_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_load_phi_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal term_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal term_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal result_1_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_reg_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_107 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_118 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_141 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abuf_1_1_4_fu_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_8_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_9_fu_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_7_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_10_fu_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_6_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_11_fu_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_5_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_4_fu_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_8_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_9_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_7_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_10_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_6_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_11_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_5_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_223_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal Abuf_1_1_1_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_2_fu_245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_1_1_3_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_1_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_2_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_1_1_3_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_424_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_456_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Abuf_load10_phi_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_load9_phi_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_489_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_118 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_412_p2 = ap_const_lv1_1))) then 
                i_1_reg_118 <= i_3_reg_614;
            end if; 
        end if;
    end process;

    i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_96 <= i_2_reg_559;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_96 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_1_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_1_reg_129 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_444_p2 = ap_const_lv1_1))) then 
                j_1_reg_129 <= j_3_reg_632;
            end if; 
        end if;
    end process;

    j_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_107 <= j_2_reg_584;
            elsif (((exitcond4_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_107 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_141 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_reg_141 <= k_1_reg_650;
            end if; 
        end if;
    end process;

    result_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                result_reg_152 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                result_reg_152 <= result_1_fu_503_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Abuf_1_1_10_fu_36 <= Abuf_1_1_6_fu_273_p3;
                Abuf_1_1_11_fu_40 <= Abuf_1_1_5_fu_266_p3;
                Abuf_1_1_4_fu_28 <= Abuf_1_1_8_fu_287_p3;
                Abuf_1_1_9_fu_32 <= Abuf_1_1_7_fu_280_p3;
                Bbuf_1_1_10_fu_52 <= Bbuf_1_1_6_fu_329_p3;
                Bbuf_1_1_11_fu_56 <= Bbuf_1_1_5_fu_322_p3;
                Bbuf_1_1_4_fu_44 <= Bbuf_1_1_8_fu_343_p3;
                Bbuf_1_1_9_fu_48 <= Bbuf_1_1_7_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                Abuf_load_phi_reg_655 <= Abuf_load_phi_fu_476_p3;
                Bbuf_load_phi_reg_660 <= Bbuf_load_phi_fu_483_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                Bbuf_load15_phi_reg_642 <= Bbuf_load15_phi_fu_436_p3;
                Bbuf_load16_phi_reg_637 <= Bbuf_load16_phi_fu_428_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_559 <= i_2_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_3_reg_614 <= i_3_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_584 <= j_2_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_3_reg_632 <= j_3_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_1_reg_650 <= k_1_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                term_reg_665 <= term_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_reg_576(1) <= tmp_1_fu_205_p2(1);
                tmp_reg_564 <= tmp_fu_201_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_2_reg_619 <= tmp_2_fu_402_p1;
                    tmp_3_reg_624(1) <= tmp_3_fu_406_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_7_reg_594 <= tmp_7_fu_234_p1;
            end if;
        end if;
    end process;
    tmp_1_reg_576(0) <= '0';
    tmp_3_reg_624(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_189_p2, ap_CS_fsm_state3, exitcond3_fu_211_p2, ap_CS_fsm_state5, exitcond2_fu_390_p2, ap_CS_fsm_state6, exitcond1_fu_412_p2, ap_CS_fsm_state7, exitcond_fu_444_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_412_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_444_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_6_fu_228_p1(2 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_1_1_1_fu_238_p3 <= 
        A_q0 when (tmp_7_reg_594(0) = '1') else 
        Abuf_1_1_11_fu_40;
    Abuf_1_1_2_fu_245_p3 <= 
        Abuf_1_1_10_fu_36 when (tmp_7_reg_594(0) = '1') else 
        A_q0;
    Abuf_1_1_3_fu_259_p3 <= 
        Abuf_1_1_4_fu_28 when (tmp_7_reg_594(0) = '1') else 
        A_q0;
    Abuf_1_1_5_fu_266_p3 <= 
        Abuf_1_1_1_fu_238_p3 when (tmp_reg_564(0) = '1') else 
        Abuf_1_1_11_fu_40;
    Abuf_1_1_6_fu_273_p3 <= 
        Abuf_1_1_2_fu_245_p3 when (tmp_reg_564(0) = '1') else 
        Abuf_1_1_10_fu_36;
    Abuf_1_1_7_fu_280_p3 <= 
        Abuf_1_1_9_fu_32 when (tmp_reg_564(0) = '1') else 
        Abuf_1_1_fu_252_p3;
    Abuf_1_1_8_fu_287_p3 <= 
        Abuf_1_1_4_fu_28 when (tmp_reg_564(0) = '1') else 
        Abuf_1_1_3_fu_259_p3;
    Abuf_1_1_fu_252_p3 <= 
        A_q0 when (tmp_7_reg_594(0) = '1') else 
        Abuf_1_1_9_fu_32;
    Abuf_load10_phi_fu_460_p3 <= 
        Abuf_1_1_11_fu_40 when (tmp_10_fu_456_p1(0) = '1') else 
        Abuf_1_1_10_fu_36;
    Abuf_load9_phi_fu_468_p3 <= 
        Abuf_1_1_9_fu_32 when (tmp_10_fu_456_p1(0) = '1') else 
        Abuf_1_1_4_fu_28;
    Abuf_load_phi_fu_476_p3 <= 
        Abuf_load10_phi_fu_460_p3 when (tmp_2_reg_619(0) = '1') else 
        Abuf_load9_phi_fu_468_p3;
    B_address0 <= tmp_6_fu_228_p1(2 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_1_1_1_fu_294_p3 <= 
        B_q0 when (tmp_7_reg_594(0) = '1') else 
        Bbuf_1_1_11_fu_56;
    Bbuf_1_1_2_fu_301_p3 <= 
        Bbuf_1_1_10_fu_52 when (tmp_7_reg_594(0) = '1') else 
        B_q0;
    Bbuf_1_1_3_fu_315_p3 <= 
        Bbuf_1_1_4_fu_44 when (tmp_7_reg_594(0) = '1') else 
        B_q0;
    Bbuf_1_1_5_fu_322_p3 <= 
        Bbuf_1_1_1_fu_294_p3 when (tmp_reg_564(0) = '1') else 
        Bbuf_1_1_11_fu_56;
    Bbuf_1_1_6_fu_329_p3 <= 
        Bbuf_1_1_2_fu_301_p3 when (tmp_reg_564(0) = '1') else 
        Bbuf_1_1_10_fu_52;
    Bbuf_1_1_7_fu_336_p3 <= 
        Bbuf_1_1_9_fu_48 when (tmp_reg_564(0) = '1') else 
        Bbuf_1_1_fu_308_p3;
    Bbuf_1_1_8_fu_343_p3 <= 
        Bbuf_1_1_4_fu_44 when (tmp_reg_564(0) = '1') else 
        Bbuf_1_1_3_fu_315_p3;
    Bbuf_1_1_fu_308_p3 <= 
        B_q0 when (tmp_7_reg_594(0) = '1') else 
        Bbuf_1_1_9_fu_48;
    Bbuf_load15_phi_fu_436_p3 <= 
        Bbuf_1_1_9_fu_48 when (tmp_9_fu_424_p1(0) = '1') else 
        Bbuf_1_1_4_fu_44;
    Bbuf_load16_phi_fu_428_p3 <= 
        Bbuf_1_1_11_fu_56 when (tmp_9_fu_424_p1(0) = '1') else 
        Bbuf_1_1_10_fu_52;
    Bbuf_load_phi_fu_483_p3 <= 
        Bbuf_load16_phi_reg_637 when (tmp_10_fu_456_p1(0) = '1') else 
        Bbuf_load15_phi_reg_642;
    C_address0 <= tmp_8_fu_494_p1(2 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= result_reg_152;

    C_we0_assign_proc : process(ap_CS_fsm_state7, exitcond_fu_444_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_444_p2 = ap_const_lv1_1))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_390_p2)
    begin
        if (((exitcond2_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_390_p2)
    begin
        if (((exitcond2_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_412_p2 <= "1" when (j_1_reg_129 = ap_const_lv2_2) else "0";
    exitcond2_fu_390_p2 <= "1" when (i_1_reg_118 = ap_const_lv2_2) else "0";
    exitcond3_fu_211_p2 <= "1" when (j_reg_107 = ap_const_lv2_2) else "0";
    exitcond4_fu_189_p2 <= "1" when (i_reg_96 = ap_const_lv2_2) else "0";
    exitcond_fu_444_p2 <= "1" when (k_reg_141 = ap_const_lv2_2) else "0";
    i_2_fu_195_p2 <= std_logic_vector(unsigned(i_reg_96) + unsigned(ap_const_lv2_1));
    i_3_fu_396_p2 <= std_logic_vector(unsigned(i_1_reg_118) + unsigned(ap_const_lv2_1));
    j_2_fu_217_p2 <= std_logic_vector(unsigned(j_reg_107) + unsigned(ap_const_lv2_1));
    j_3_fu_418_p2 <= std_logic_vector(unsigned(j_1_reg_129) + unsigned(ap_const_lv2_1));
    k_1_fu_450_p2 <= std_logic_vector(unsigned(k_reg_141) + unsigned(ap_const_lv2_1));
    result_1_fu_503_p2 <= std_logic_vector(unsigned(term_reg_665) + unsigned(result_reg_152));
    term_fu_499_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(Abuf_load_phi_reg_655) * signed(Bbuf_load_phi_reg_660))), 32));
    tmp_10_fu_456_p1 <= k_reg_141(1 - 1 downto 0);
    tmp_1_fu_205_p2 <= std_logic_vector(shift_left(unsigned(i_reg_96),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_2_fu_402_p1 <= i_1_reg_118(1 - 1 downto 0);
    tmp_3_fu_406_p2 <= std_logic_vector(shift_left(unsigned(i_1_reg_118),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_4_fu_489_p2 <= std_logic_vector(unsigned(tmp_3_reg_624) + unsigned(j_1_reg_129));
    tmp_5_fu_223_p2 <= std_logic_vector(unsigned(tmp_1_reg_576) + unsigned(j_reg_107));
    tmp_6_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_223_p2),64));
    tmp_7_fu_234_p1 <= j_reg_107(1 - 1 downto 0);
    tmp_8_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_489_p2),64));
    tmp_9_fu_424_p1 <= j_1_reg_129(1 - 1 downto 0);
    tmp_fu_201_p1 <= i_reg_96(1 - 1 downto 0);
end behav;
